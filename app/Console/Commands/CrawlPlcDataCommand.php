<?php

namespace App\Console\Commands;

use App\Models\Machine;
use App\Models\MachineThreshold;
use App\Services\PlcDataService;
use Illuminate\Console\Command;

class CrawlPlcDataCommand extends Command
{
    protected $signature = 'plc:crawl {--interval=5 : Th·ªùi gian gi·ªØa c√°c l·∫ßn crawl (gi√¢y)}';
    protected $description = 'Crawl d·ªØ li·ªáu t·ª´ PLC web interface';

    protected $plcDataService;

    public function __construct(PlcDataService $plcDataService)
    {
        parent::__construct();
        $this->plcDataService = $plcDataService;
    }

 public function handle()
{
    $interval = $this->option('interval');
    $this->info('B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu');

    while(true) {
        try {
            // L·∫•y t·∫•t c·∫£ m√°y ƒëang active
            $machines = Machine::where('status', true)->get();
            $this->info("\nT√¨m th·∫•y " . $machines->count() . " m√°y ƒëang ho·∫°t ƒë·ªông");

            foreach($machines as $machine) {
                $this->info("\nƒêang l·∫•y d·ªØ li·ªáu m√°y {$machine->name}...");

                $data = $this->plcDataService->crawlData($machine->id);

                if ($data) {
                    $this->info("L∆∞u d·ªØ li·ªáu m√°y {$machine->name} (ID: {$data->id}) th√†nh c√¥ng");

                    // Ki·ªÉm tra c√°c ng∆∞·ª°ng
                    $thresholds = MachineThreshold::where('machine_id', $machine->id)
                        ->where('status', true)
                        ->get();

                    $this->info("T√¨m th·∫•y " . $thresholds->count() . " ng∆∞·ª°ng c·∫ßn ki·ªÉm tra");

                    foreach($thresholds as $threshold) {
                        $plcDataKey = $threshold->plc_data_key;
                        $value = $data->{$plcDataKey};
                        $this->info("Ki·ªÉm tra {$threshold->name}:");
                        $this->info("- Key: {$plcDataKey}");
                        $this->info("- Gi√° tr·ªã hi·ªán t·∫°i: {$value}");
                        $this->info("- Ng∆∞·ª°ng: Min={$threshold->min_value}, Max={$threshold->max_value}");
                        $this->info("- C·∫£nh b√°o: Min={$threshold->warning_min_value}, Max={$threshold->warning_max_value}");

                        if($threshold->type === 'boolean' && $value === true) {
                            $this->warn("‚ö†Ô∏è Ph√°t hi·ªán c·∫£nh b√°o boolean: {$threshold->warning_message}");
                        }
                        else if($value > $threshold->max_value) {
                            $this->error("üî¥ V∆∞·ª£t ng∆∞·ª°ng tr√™n: {$value} > {$threshold->max_value}");
                        }
                        else if($value < $threshold->min_value) {
                            $this->error("üî¥ D∆∞·ªõi ng∆∞·ª°ng d∆∞·ªõi: {$value} < {$threshold->min_value}");
                        }
                        else if($value > $threshold->warning_max_value) {
                            $this->warn("‚ö†Ô∏è G·∫ßn ng∆∞·ª°ng tr√™n: {$value}");
                        }
                        else if($value < $threshold->warning_min_value) {
                            $this->warn("‚ö†Ô∏è G·∫ßn ng∆∞·ª°ng d∆∞·ªõi: {$value}");
                        }
                        else {
                            $this->info("‚úÖ Gi√° tr·ªã b√¨nh th∆∞·ªùng");
                        }
                    }

                    // Hi·ªÉn th·ªã c√°c th√¥ng s·ªë quan tr·ªçng
                    // $this->table(
                    //     ['Th√¥ng s·ªë', 'Gi√° tr·ªã'],
                    //     [
                    //         ['Ca', $data->ca],
                    //         ['Nhi·ªát ƒë·ªô nh·ª±a', $data->nhiet_do_nhua],
                    //         ['√Åp l·ª±c nh·ª±a', $data->ap_luc_nhua],
                    //         ['NƒÉng su·∫•t', $data->nang_suat],
                    //         ['T·ªëc ƒë·ªô VX', $data->toc_do_vx],
                    //         ['T·ªëc ƒë·ªô m√°y ch·ªâ', $data->toc_do_may_chi],
                    //         ['Nhi·ªát ƒë·ªô n∆∞·ªõc vacuum 1', $data->nhiet_do_nuoc_vacuum_1],
                    //         ['Nhi·ªát ƒë·ªô n∆∞·ªõc vacuum 2', $data->nhiet_do_nuoc_vacuum_2]
                    //     ]
                    // );
                } else {
                    $this->error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ m√°y {$machine->name}");
                }
            }

        } catch (\Exception $e) {
            $this->error('L·ªói: ' . $e->getMessage());
            $this->error('Stack trace: ' . $e->getTraceAsString());
        }

        if ($interval > 0) {
            $this->info("\nƒê·ª£i {$interval} gi√¢y...");
            sleep($interval);
        } else {
            break;
        }
    }
}
}
